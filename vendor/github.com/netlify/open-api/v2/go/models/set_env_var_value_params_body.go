// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// SetEnvVarValueParamsBody set env var value params body
//
// swagger:model setEnvVarValueParamsBody
type SetEnvVarValueParamsBody struct {

	// The deploy context in which this value will be used. `dev` refers to local development when running `netlify dev`. `branch` must be provided with a value in `context_parameter`.
	// Enum: [all dev branch-deploy deploy-preview production branch]
	Context string `json:"context,omitempty"`

	// An additional parameter for custom branches. Currently, this is used for providing a branch name when `context=branch`.
	ContextParameter string `json:"context_parameter,omitempty"`

	// The environment variable's unencrypted value
	Value string `json:"value,omitempty"`
}

// Validate validates this set env var value params body
func (m *SetEnvVarValueParamsBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateContext(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var setEnvVarValueParamsBodyTypeContextPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["all","dev","branch-deploy","deploy-preview","production","branch"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		setEnvVarValueParamsBodyTypeContextPropEnum = append(setEnvVarValueParamsBodyTypeContextPropEnum, v)
	}
}

const (

	// SetEnvVarValueParamsBodyContextAll captures enum value "all"
	SetEnvVarValueParamsBodyContextAll string = "all"

	// SetEnvVarValueParamsBodyContextDev captures enum value "dev"
	SetEnvVarValueParamsBodyContextDev string = "dev"

	// SetEnvVarValueParamsBodyContextBranchDeploy captures enum value "branch-deploy"
	SetEnvVarValueParamsBodyContextBranchDeploy string = "branch-deploy"

	// SetEnvVarValueParamsBodyContextDeployPreview captures enum value "deploy-preview"
	SetEnvVarValueParamsBodyContextDeployPreview string = "deploy-preview"

	// SetEnvVarValueParamsBodyContextProduction captures enum value "production"
	SetEnvVarValueParamsBodyContextProduction string = "production"

	// SetEnvVarValueParamsBodyContextBranch captures enum value "branch"
	SetEnvVarValueParamsBodyContextBranch string = "branch"
)

// prop value enum
func (m *SetEnvVarValueParamsBody) validateContextEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, setEnvVarValueParamsBodyTypeContextPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *SetEnvVarValueParamsBody) validateContext(formats strfmt.Registry) error {

	if swag.IsZero(m.Context) { // not required
		return nil
	}

	// value enum
	if err := m.validateContextEnum("context", "body", m.Context); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *SetEnvVarValueParamsBody) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SetEnvVarValueParamsBody) UnmarshalBinary(b []byte) error {
	var res SetEnvVarValueParamsBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
