// Copyright 2019 The Hugo Authors. All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// This file is autogenerated.

package valueobject

import (
	"fmt"
	"github.com/mdfriday/hugoverse/internal/domain/contenthub"
	"github.com/mdfriday/hugoverse/internal/domain/fs"
)

// ZeroFile represents a zero value of source.File with warnings if invoked.
type zeroFile struct {
}

func NewZeroFile() contenthub.File {
	return zeroFile{}
}

func (zeroFile) IsZero() bool {
	return true
}

func (z zeroFile) RelPath() (o0 string) {
	fmt.Println(".File.RelPath on zero object. Wrap it in if or with: {{ with .File }}{{ .RelPath }}{{ end }}")
	return
}
func (z zeroFile) Section() (o0 string) {
	fmt.Println(".File.Section on zero object. Wrap it in if or with: {{ with .File }}{{ .Section }}{{ end }}")
	return
}
func (z zeroFile) Lang() (o0 string) {
	fmt.Println(".File.Lang on zero object. Wrap it in if or with: {{ with .File }}{{ .Lang }}{{ end }}")
	return
}
func (z zeroFile) Filename() (o0 string) {
	fmt.Println(".File.Filename on zero object. Wrap it in if or with: {{ with .File }}{{ .Filename }}{{ end }}")
	return
}
func (z zeroFile) Dir() (o0 string) {
	fmt.Println(".File.Dir on zero object. Wrap it in if or with: {{ with .File }}{{ .Dir }}{{ end }}")
	return
}
func (z zeroFile) Extension() (o0 string) {
	fmt.Println(".File.Extension on zero object. Wrap it in if or with: {{ with .File }}{{ .Extension }}{{ end }}")
	return
}
func (z zeroFile) Ext() (o0 string) {
	fmt.Println(".File.Ext on zero object. Wrap it in if or with: {{ with .File }}{{ .Ext }}{{ end }}")
	return
}
func (z zeroFile) LogicalName() (o0 string) {
	fmt.Println(".File.LogicalName on zero object. Wrap it in if or with: {{ with .File }}{{ .LogicalName }}{{ end }}")
	return
}
func (z zeroFile) BaseFileName() (o0 string) {
	fmt.Println(".File.BaseFileName on zero object. Wrap it in if or with: {{ with .File }}{{ .BaseFileName }}{{ end }}")
	return
}
func (z zeroFile) TranslationBaseName() (o0 string) {
	fmt.Println(".File.TranslationBaseName on zero object. Wrap it in if or with: {{ with .File }}{{ .TranslationBaseName }}{{ end }}")
	return
}
func (z zeroFile) ContentBaseName() (o0 string) {
	fmt.Println(".File.ContentBaseName on zero object. Wrap it in if or with: {{ with .File }}{{ .ContentBaseName }}{{ end }}")
	return
}
func (z zeroFile) UniqueID() (o0 string) {
	fmt.Println(".File.UniqueID on zero object. Wrap it in if or with: {{ with .File }}{{ .UniqueID }}{{ end }}")
	return
}
func (z zeroFile) FileInfo() (o0 fs.FileMetaInfo) {
	fmt.Println(".File.FileInfo on zero object. Wrap it in if or with: {{ with .File }}{{ .FileInfo }}{{ end }}")
	return
}
